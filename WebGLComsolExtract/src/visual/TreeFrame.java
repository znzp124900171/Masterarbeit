/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visual;


import com.comsol.model.util.*;

import java.io.BufferedWriter;
import java.io.File;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import static java.lang.System.out;
import static javax.swing.SwingUtilities.invokeLater;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Sebastian
 */
public class TreeFrame extends javax.swing.JFrame implements IGuiStatusExchange{
    
    private ComsolData data;

    //Gui Thread too display unhandeled Exception
    public class GuiThread extends Thread{
        public GuiThread(Runnable run){
            super(run);
            this.setUncaughtExceptionHandler(new UncaughtExceptionHandler(){
                @Override
                public void uncaughtException(Thread t, Throwable e) {
                    logError(new Exception(e));
                }
        });
        }
        
    }
    
    
    public TreeFrame() {
    
        initComponents();
        data = new ComsolData(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        // Dialog of IP Setup
        DialogIPSetup = new javax.swing.JDialog(); // init dialog window
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ButtonIPSetupCancel = new javax.swing.JButton();
        ButtonIPSetupConnect = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField(); // input ip addresse
        jTextField2 = new javax.swing.JTextField();	// input port number
        jCheckBoxStandAlone = new javax.swing.JCheckBox(); // set to standalone
        
        DialogIPSetup.setBounds(new java.awt.Rectangle(400, 400, 440, 200)); // position is relative to the parent JPanel
        DialogIPSetup.setResizable(false);

        jLabel1.setText("IP Adress");
        jLabel4.setText("Port Number");
        jTextField1.setText("LOCALHOST");
        jTextField2.setText("2036");
        jCheckBoxStandAlone.setText("Standalone");

        ButtonIPSetupCancel.setText("Cancel");
        ButtonIPSetupCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonIPSetupCancelActionPerformed(evt);
            }
        });

        ButtonIPSetupConnect.setText("Connect");
        ButtonIPSetupConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonIPSetupConnectActionPerformed(evt);
            }
        });


        javax.swing.GroupLayout DialogIPSetupLayout = new javax.swing.GroupLayout(DialogIPSetup.getContentPane());
        DialogIPSetup.getContentPane().setLayout(DialogIPSetupLayout);
        DialogIPSetupLayout.setHorizontalGroup(
            DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogIPSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DialogIPSetupLayout.createSequentialGroup()
                        .addComponent(jCheckBoxStandAlone)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(DialogIPSetupLayout.createSequentialGroup()
                        .addComponent(ButtonIPSetupConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonIPSetupCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1)
                    .addComponent(jTextField2))
                .addContainerGap())
        );
        DialogIPSetupLayout.setVerticalGroup(
            DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogIPSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxStandAlone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(DialogIPSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonIPSetupCancel)
                    .addComponent(ButtonIPSetupConnect))
                .addContainerGap())
        );
        
        DialogLoadModels = new javax.swing.JDialog();
        
        
        
        LabelError = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        
       
        
        
        DialogLoadModels.setBounds(new java.awt.Rectangle(400, 400, 400, 400));
        DialogLoadModels.setResizable(false);
        
        // show active COMSOL models
        ScrollPanelActiveModels = new javax.swing.JScrollPane();
        ListActiveModels = new javax.swing.JList();
        ButtonLoadModel = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        ButtonUnload = new javax.swing.JButton();
        
        ListActiveModels.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION); // only one list index can be selected at a time
        ListActiveModels.setToolTipText("");
        ListActiveModels.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ScrollPanelActiveModels.setViewportView(ListActiveModels); // load the list to the scroll panel

        ButtonLoadModel.setText("Load Model");
        ButtonLoadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLoadModelActionPerformed(evt);
            }
        });

        ButtonCancel.setText("Cancel");
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        ButtonUnload.setText("Unload Model");
        ButtonUnload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUnloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DialogLoadModelsLayout = new javax.swing.GroupLayout(DialogLoadModels.getContentPane());
        DialogLoadModels.getContentPane().setLayout(DialogLoadModelsLayout);
        DialogLoadModelsLayout.setHorizontalGroup(
            DialogLoadModelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogLoadModelsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogLoadModelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPanelActiveModels)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DialogLoadModelsLayout.createSequentialGroup()
                        .addComponent(ButtonLoadModel, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonUnload, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        DialogLoadModelsLayout.setVerticalGroup(
            DialogLoadModelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogLoadModelsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPanelActiveModels, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DialogLoadModelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonLoadModel)
                    .addComponent(ButtonCancel)
                    .addComponent(ButtonUnload))
                .addContainerGap())
        );
        
        // dialog not saved window
        DialogNotSaved = new javax.swing.JDialog();
        DialogProgressBar = new javax.swing.JDialog();
        ProgressBarDialog = new javax.swing.JProgressBar();
        LabelProgress = new javax.swing.JLabel();
        ButtonCancelAction = new javax.swing.JButton();
        
        javax.swing.GroupLayout DialogNotSavedLayout = new javax.swing.GroupLayout(DialogNotSaved.getContentPane());
        DialogNotSaved.getContentPane().setLayout(DialogNotSavedLayout);
        DialogNotSavedLayout.setHorizontalGroup(
            DialogNotSavedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        DialogNotSavedLayout.setVerticalGroup(
            DialogNotSavedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        LabelProgress.setText("jLabel2");

        ButtonCancelAction.setText("jButton1");

        javax.swing.GroupLayout DialogProgressBarLayout = new javax.swing.GroupLayout(DialogProgressBar.getContentPane());
        DialogProgressBar.getContentPane().setLayout(DialogProgressBarLayout);
        DialogProgressBarLayout.setHorizontalGroup(
            DialogProgressBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogProgressBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogProgressBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProgressBarDialog, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DialogProgressBarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ButtonCancelAction, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        DialogProgressBarLayout.setVerticalGroup(
            DialogProgressBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DialogProgressBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProgressBarDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(ButtonCancelAction)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 640));
        
        // List windows of COMOSOL files and output WebGL files
        ScrollPaneLeftTree = new javax.swing.JScrollPane();
        LeftTree = new javax.swing.JTree();
        ScrollPanelLeftText = new javax.swing.JScrollPane();
        LeftTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        RightTextArea = new javax.swing.JTextArea();
        LabelWebGL = new javax.swing.JLabel();
        LabelComsol = new javax.swing.JLabel();
        ScrollPanelRightTree = new javax.swing.JScrollPane();
        RightTree = new javax.swing.JTree();
        LabelComsolConnection = new javax.swing.JLabel();
        LabelConfigPath = new javax.swing.JLabel();
        
        LeftTree.setModel(null);
        LeftTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                LeftTreeValueChanged(evt);
            }
        });
        ScrollPaneLeftTree.setViewportView(LeftTree);

        LeftTextArea.setEditable(false);
        LeftTextArea.setColumns(20);
        LeftTextArea.setRows(8);
        ScrollPanelLeftText.setViewportView(LeftTextArea);

        RightTextArea.setEditable(false);
        RightTextArea.setColumns(20);
        RightTextArea.setRows(8);
        jScrollPane3.setViewportView(RightTextArea);

        LabelWebGL.setText("WebGL Models");

        LabelComsol.setText("Comsol Models");

        RightTree.setModel(null);
        RightTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                RightTreeValueChanged(evt);
            }
        });
        ScrollPanelRightTree.setViewportView(RightTree);

        LabelComsolConnection.setText("no connection to Comsol Server");
        LabelConfigPath.setText("no File Opened");
        
        
        // initialize menu bar 
        MenuFile = new javax.swing.JMenu();
        MenuItemNew = new javax.swing.JMenuItem();
        MenuItemOpenConfig = new javax.swing.JMenuItem();
        MenuItemOpenModel = new javax.swing.JMenuItem();
        MenuItemShowModels = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuItemSave = new javax.swing.JMenuItem();
        MenuItemSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuItemExit = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        MenuItemAddModel = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuItemDeleteLeft = new javax.swing.JMenuItem();
        MenuItemDeleteRight = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        CheckBoxStaticServer = new javax.swing.JCheckBoxMenuItem();
        MenuConnection = new javax.swing.JMenu();
        MenuItemQuickCon = new javax.swing.JMenuItem();
        MenuItemCon = new javax.swing.JMenuItem();
        MenuItemDisCon = new javax.swing.JMenuItem();
        
        // menu set of "File"
        MenuFile.setText("File");

        MenuItemNew.setText("New WebGL Config");
        MenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNewActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemNew);

        MenuItemOpenConfig.setText("Open WebGL Config...");
        MenuItemOpenConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenConfigActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemOpenConfig);

        MenuItemOpenModel.setText("Open Comsol Model from File...");
        MenuItemOpenModel.setEnabled(false);
        MenuItemOpenModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenModelActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemOpenModel);

        MenuItemShowModels.setText("Show active Comsol Models...");
        MenuItemShowModels.setEnabled(false);
        MenuItemShowModels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemShowModelsActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemShowModels);
        MenuFile.add(jSeparator1);

        MenuItemSave.setText("Save WebGL Config");
        MenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemSave);

        MenuItemSaveAs.setText("Save as WebGL Config...");
        MenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveAsActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemSaveAs);
        MenuFile.add(jSeparator2);

        MenuItemExit.setText("Exit");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemExit);

        jMenuBar1.add(MenuFile);

        MenuEdit.setText("Edit");

        MenuItemAddModel.setText("Add Comsol Model to WebGL");
        MenuItemAddModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAddModelActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemAddModel);
        MenuEdit.add(jSeparator3);

        MenuItemDeleteLeft.setText("Delete selceted Model from left side");
        MenuItemDeleteLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDeleteLeftActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemDeleteLeft);

        MenuItemDeleteRight.setText("Delete selceted Model from right side");
        MenuItemDeleteRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDeleteRightActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemDeleteRight);
        MenuEdit.add(jSeparator4);

        CheckBoxStaticServer.setSelected(true);
        CheckBoxStaticServer.setText("Enable static Web Server");
        MenuEdit.add(CheckBoxStaticServer);

        jMenuBar1.add(MenuEdit);

        MenuConnection.setText("Connection");

        MenuItemQuickCon.setText("Quick Connect");
        MenuItemQuickCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemQuickConActionPerformed(evt);
            }
        });
        MenuConnection.add(MenuItemQuickCon);

        MenuItemCon.setText("Connect...");
        MenuItemCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemConActionPerformed(evt);
            }
        });
        MenuConnection.add(MenuItemCon);

        MenuItemDisCon.setText("Disconnect");
        MenuItemDisCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDisConActionPerformed(evt);
            }
        });
        MenuConnection.add(MenuItemDisCon);

        jMenuBar1.add(MenuConnection);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelConfigPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelWebGL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollPanelLeftText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(ScrollPaneLeftTree, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelComsolConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(ScrollPanelRightTree)
                    .addComponent(LabelComsol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelWebGL)
                    .addComponent(LabelComsol))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPanelRightTree, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                    .addComponent(ScrollPaneLeftTree))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ScrollPanelLeftText)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelConfigPath)
                    .addComponent(LabelComsolConnection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   

    private void MenuItemOpenConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenConfigActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                loadModelByFiles(); 
            }
        }).start();
    }//GEN-LAST:event_MenuItemOpenConfigActionPerformed

 
    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                if(data.isUnsavedData()){
                    if(confirmUnsavedChanges()){
                       System.exit(0);
                    }
                } else {
                    System.exit(0);
                }
            }  
        }).start();

    }//GEN-LAST:event_MenuItemExitActionPerformed


    private void MenuItemQuickConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemQuickConActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                data.connectToComsol("localhost", 2036, false);
                if(data.isConnected()){
                    MenuItemOpenModel.setEnabled(true);
                    MenuItemShowModels.setEnabled(true);
                }
            }
        }).start();
    }//GEN-LAST:event_MenuItemQuickConActionPerformed


    private void MenuItemAddModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAddModelActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                 if(RightTree.getSelectionPath() != null){
                    data.addModel(RightTree.getSelectionPath().getLastPathComponent());
                    }
            }
        }).start();
        
    }//GEN-LAST:event_MenuItemAddModelActionPerformed


    private void MenuItemDeleteLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDeleteLeftActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                 if(LeftTree.getSelectionPath() != null){
                    data.deleteModelLeft(LeftTree.getSelectionPath().getLastPathComponent());
                }
            }
        }).start();
        
    }//GEN-LAST:event_MenuItemDeleteLeftActionPerformed

    private void MenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNewActionPerformed

         new GuiThread(new Runnable() {
            @Override
            public void run() {
                if(data.isUnsavedData()){
                    if(confirmUnsavedChanges()){
                       data.newModelList(); 
                    }
                } else {
                    data.newModelList();
                }
            }
        }).start();

    }//GEN-LAST:event_MenuItemNewActionPerformed

    private void MenuItemOpenModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenModelActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                loadModelFromComsol();
            }
        }).start();
    }//GEN-LAST:event_MenuItemOpenModelActionPerformed
  
    private void MenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                if(data.isDirectory()){
                    data.saveModel(CheckBoxStaticServer.isSelected());
                }else{
                    saveAs();
                }
            }
        }).start();
    }//GEN-LAST:event_MenuItemSaveActionPerformed

    private void MenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveAsActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                saveAs();
            }
        }).start();
    }//GEN-LAST:event_MenuItemSaveAsActionPerformed

    private void LeftTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_LeftTreeValueChanged
        setInfoLeft();
    }//GEN-LAST:event_LeftTreeValueChanged

    private void MenuItemDisConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDisConActionPerformed
        new GuiThread(new Runnable() {

            @Override
            public void run() {
                data.disconnect();
            }
        }).start();
    }//GEN-LAST:event_MenuItemDisConActionPerformed

    private void MenuItemConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemConActionPerformed
       DialogIPSetup.setVisible(true);
    }//GEN-LAST:event_MenuItemConActionPerformed

    private void RightTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_RightTreeValueChanged
        setInfoRight();
    }//GEN-LAST:event_RightTreeValueChanged
   
    private void MenuItemShowModelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemShowModelsActionPerformed
        invokeLater(new Runnable(){

            @Override
            public void run() {
                DialogLoadModels.setVisible(true);
                String modelTags[] = data.getModelTags();
                DefaultListModel listModel = new DefaultListModel();

                for(String modelTag : modelTags)
                    listModel.addElement(modelTag);

                ListActiveModels.setModel(listModel);
            }
        });
       
    }//GEN-LAST:event_MenuItemShowModelsActionPerformed

    private void ButtonIPSetupConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonIPSetupConnectActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                try{
                    String ipAdress = jTextField1.getText();
                    int portNumber = java.lang.Integer.parseInt(jTextField2.getText());
                    boolean standalone = jCheckBoxStandAlone.isSelected();
                    data.connectToComsol(ipAdress, portNumber, standalone);

                    printConnectionState("Connection etablished"); 
                    printError("");   
                }catch(Exception e){
                    printConnectionState("Connection failed"); 
                    logError(e);
                }
                if(data.isConnected()){
                    MenuItemOpenModel.setEnabled(true);
                    MenuItemShowModels.setEnabled(true);
                }
            }
        }).start();
    }//GEN-LAST:event_ButtonIPSetupConnectActionPerformed

    private void ButtonIPSetupCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonIPSetupCancelActionPerformed
        this.DialogIPSetup.setVisible(false);   
    }//GEN-LAST:event_ButtonIPSetupCancelActionPerformed

    private void ButtonLoadModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLoadModelActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                Object selObj = ListActiveModels.getModel().getElementAt(ListActiveModels.getSelectedIndex());
                DialogLoadModels.setVisible(false);
      
                if(selObj instanceof String){
                    data.loadModel(((String) selObj));
                }  
            }
        }).start();

      
    }//GEN-LAST:event_ButtonLoadModelActionPerformed

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        DialogLoadModels.setVisible(false);
    }//GEN-LAST:event_ButtonCancelActionPerformed

    private void MenuItemDeleteRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDeleteRightActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                 if(RightTree.getSelectionPath() != null){
                    data.removeModelRight(RightTree.getSelectionPath().getLastPathComponent());
                }
            }
        }).start();
        
    }//GEN-LAST:event_MenuItemDeleteRightActionPerformed

    private void ButtonUnloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUnloadActionPerformed
        new GuiThread(new Runnable() {
            @Override
            public void run() {
                Object selObj = ListActiveModels.getModel().getElementAt(ListActiveModels.getSelectedIndex());
      
                if(selObj instanceof String){
                    data.unloadModel(((String) selObj));
                
                    String modelTags[] = data.getModelTags();
                    DefaultListModel listModel = new DefaultListModel();

                    for(String modelTag : modelTags)
                        listModel.addElement(modelTag);

                    ListActiveModels.setModel(listModel);
                }
            }
        }).start();

    }//GEN-LAST:event_ButtonUnloadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonCancelAction;
    private javax.swing.JButton ButtonIPSetupCancel;
    private javax.swing.JButton ButtonIPSetupConnect;
    private javax.swing.JButton ButtonLoadModel;
    private javax.swing.JButton ButtonUnload;
    private javax.swing.JCheckBoxMenuItem CheckBoxStaticServer;
    private javax.swing.JDialog DialogIPSetup;
    private javax.swing.JDialog DialogLoadModels;
    private javax.swing.JDialog DialogNotSaved;
    private javax.swing.JDialog DialogProgressBar;
    private javax.swing.JLabel LabelComsol;
    private javax.swing.JLabel LabelComsolConnection;
    private javax.swing.JLabel LabelConfigPath;
    private javax.swing.JLabel LabelError;
    private javax.swing.JLabel LabelProgress;
    private javax.swing.JLabel LabelWebGL;
    private javax.swing.JTextArea LeftTextArea;
    private javax.swing.JTree LeftTree;
    private javax.swing.JList ListActiveModels;
    private javax.swing.JMenu MenuConnection;
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuItemAddModel;
    private javax.swing.JMenuItem MenuItemCon;
    private javax.swing.JMenuItem MenuItemDeleteLeft;
    private javax.swing.JMenuItem MenuItemDeleteRight;
    private javax.swing.JMenuItem MenuItemDisCon;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenuItem MenuItemNew;
    private javax.swing.JMenuItem MenuItemOpenConfig;
    private javax.swing.JMenuItem MenuItemOpenModel;
    private javax.swing.JMenuItem MenuItemQuickCon;
    private javax.swing.JMenuItem MenuItemSave;
    private javax.swing.JMenuItem MenuItemSaveAs;
    private javax.swing.JMenuItem MenuItemShowModels;
    private javax.swing.JProgressBar ProgressBarDialog;
    private javax.swing.JTextArea RightTextArea;
    private javax.swing.JTree RightTree;
    private javax.swing.JScrollPane ScrollPaneLeftTree;
    private javax.swing.JScrollPane ScrollPanelActiveModels;
    private javax.swing.JScrollPane ScrollPanelLeftText;
    private javax.swing.JScrollPane ScrollPanelRightTree;
    private javax.swing.JCheckBox jCheckBoxStandAlone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    /**
     * main Function
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TreeFrame().setVisible(true);
            }
        });
    }
    
    private boolean confirmUnsavedChanges() {

        int n = JOptionPane.showConfirmDialog(
            this, 
            "There are unsaved Changes, Click Yes to continue?", 
            "Unsaved Changes",
            JOptionPane.YES_NO_OPTION);
        
        return (n == JOptionPane.YES_OPTION);  
    }
     /**
     * open Filedialog for Comsol Model Selection
     * load this model via Comsol API
     */
    private void loadModelFromComsol(){
        FileFilter fileFilter = new FileNameExtensionFilter("mph file",  "mph");
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(fileFilter);
        int status;

        status = fileChooser.showOpenDialog(this);

        if(status == JFileChooser.APPROVE_OPTION) {
            data.loadModel(fileChooser.getSelectedFile());
        }
    }
    
     /**
     * open Filedialog for Selcetion Directory
     * load/open all model Files from this directory
     */
    private void loadModelByFiles(){
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int status;
        status = fileChooser.showOpenDialog(this);
        System.out.println(status);
        System.out.println(JFileChooser.APPROVE_OPTION);

        if(status == JFileChooser.APPROVE_OPTION) {
             data.openModel(fileChooser.getSelectedFile());
        }
    }
    
     /**
     * open Filedialog for Selcetion Directory
     * save all model in this directory
     */
    private void saveAs(){
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int status;
        status = fileChooser.showSaveDialog(this);

        if(status == JFileChooser.APPROVE_OPTION) {
             data.saveModel(CheckBoxStaticServer.isSelected(), fileChooser.getSelectedFile());
        } 
    }

     /**
     * updates the right info text field
     */
    private void setInfoRight(){
        invokeLater(new Runnable() {

            @Override
            public void run() {
                Object node = RightTree.getSelectionPath().getLastPathComponent();
                if(node != null && node instanceof DefaultMutableTreeNode){
                    Object nodeObj= ((DefaultMutableTreeNode) node).getUserObject();
                    if(nodeObj != null && nodeObj instanceof ITreeNode){
                        RightTextArea.setText(((ITreeNode) nodeObj).getInfoText());
                    }
                }
            }
        });
        
    }
     
    /**
     * updates the right info text field
     */
    private void setInfoLeft(){
        invokeLater(new Runnable() {

            @Override
            public void run() {
               Object node = LeftTree.getSelectionPath().getLastPathComponent();
                if(node != null && node instanceof DefaultMutableTreeNode){
                    Object nodeObj= ((DefaultMutableTreeNode) node).getUserObject();
                    if(nodeObj != null && nodeObj instanceof ITreeNode){
                        LeftTextArea.setText(((ITreeNode) nodeObj).getInfoText());
                    }
                }
            }
        });
        
    }
    
    @Override
    public void logError(Exception e){
        printError("Error: for more Information look 'Error.log'.");
        
        File f = new File("Error.log");
        try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f, true)))){
                SimpleDateFormat formatter = new SimpleDateFormat( "yyyy.MM.dd HH:mm:ss ");
                formatter.format(new Date());

                out.println('\n' + formatter.format(new Date()) + " Error Stack Trace: \n");                
                e.printStackTrace(out);
                out.println('\n');
                
        }catch(IOException ex){}
        finally{
            out.close();
        }
    }

    @Override
    public void printError(final String error) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                LabelError.setText(error);
            }
        });
    }

    @Override
    public void printConnectionState(final String connectionState) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                LabelComsolConnection.setText(connectionState);
            }
        });
    }

    @Override
    public void printFilePath(final String filePath) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                LabelConfigPath.setText(filePath);
            }
        });
    }

    @Override
    public void updateProgressBar(final int percent) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                ProgressBarDialog.setValue(percent);
            }
        });
    }

    @Override
    public void setRightModel(final DefaultTreeModel treeModel) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                RightTree.setModel(treeModel);
            }
        });
    }

    @Override
    public void setLeftModel(final DefaultTreeModel treeModel) {
        invokeLater(new Runnable() {

            @Override
            public void run() {
                LeftTree.setModel(treeModel);
            }
        });
    }


}
